<template>
    <section class="page-search">
        <header>
            <input type="text" name="" id="">
            <span>搜索</span>
        </header>
        <lt-footer :type="2"></lt-footer>
        <div class="lt-main">
            <div id="tree"></div>
        </div>
    </section>
</template>
<script>
    import * as d3 from 'd3'
    import { ltFooter } from 'components'
    import { mapGetters, mapActions } from 'vuex'
    export default {
        data() {
            return {
                title: '找回密码',
                treeData: []
            }
        },
        components: {
            ltFooter
        },
        computed: {
            ...mapGetters([
                'isLogin'
            ]),
            isGetCode() {
                let isDisable = true
                if (this.isRequestCode) {
                    isDisable = this.mobile === ''
                } else {
                    isDisable = true
                }
                return {
                    disable: isDisable
                }
            }
        },
        mounted() {
            this.getTree({
                self: this,
                success(treeData) {
                    let margin = { top: 20, right: 120, bottom: 20, left: 120 }
                    let width = 960 - margin.right - margin.left
                    let height = 500 - margin.top - margin.bottom

                    let i = 0
                    console.log(d3)

                    let tree = d3.layout.tree()
                        .size([height, width])

                    let diagonal = d3.svg.diagonal()
                        .projection(d => {
                            return [d.y, d.x]
                        })

                    let svg = d3.select('tree').append('svg')
                        .attr('width', width + margin.right + margin.left)
                        .attr('height', height + margin.top + margin.bottom)
                        .append('g')
                        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')

                    console.log(d3.select('tree'))

                    let root = treeData[0]

                    update(root)

                    function update(root) {
                        // Compute the new tree layout.
                        let nodes = tree.nodes(root).reverse()
                        let links = tree.links(nodes)

                        // Normalize for fixed-depth.
                        nodes.forEach(d => {
                            d.y = d.depth * 180
                        })

                        // Declare the nodesâ€¦
                        let node = svg.selectAll('g.node')
                            .data(nodes, d => {
                                return d.id || (d.id = ++i)
                            })

                        // Enter the nodes.
                        let nodeEnter = node.enter().append('g')
                            .attr('class', 'node')
                            .attr('transform', d => {
                                return 'translate(' + d.y + ',' + d.x + ')'
                            })

                        nodeEnter.append('circle')
                            .attr('r', 10)
                            .style('fill', '#fff')

                        nodeEnter.append('text')
                            .attr('x', d => {
                                return d.children || d._children ? -13 : 13
                            })
                            .attr('dy', '.35em')
                            .attr('text-anchor', d => {
                                return d.children || d._children ? 'end' : 'start'
                            })
                            .text(d => {
                                return d.name
                            })
                            .style('fill-opacity', 1)

                        // Declare the linksâ€¦
                        let link = svg.selectAll('path.link')
                            .data(links, d => {
                                return d.target.id
                            })

                        // Enter the links.
                        link.enter().insert('path', 'g')
                            .attr('class', 'link')
                            .attr('d', diagonal)
                    }
                }
            })
        },
        methods: {
            ...mapActions([
                'getTree'
            ]),
            logout() {
                this.postLogin({
                    params: {
                        'mobile': this.mobile,
                        'password': this.password
                    },
                    error() {
                        console.log(12)
                    }
                })
            },
            getCode() {
                // this.showLoading({
                //    isShow: true,
                //    text: '请稍等~~'
                // })
                if (!this.isRequestCode) return
                let timer = setInterval(() => {
                    --this.codeTime
                    if (this.codeTime === 0) {
                        this.codeTime = 0
                        this.isRequestCode = true
                        clearInterval(timer)
                    }
                }, 1000)
                this.isRequestCode = false
                this.codeText = '重新获取'
                this.showToast({
                    isShow: true,
                    text: 'xxx'
                })
            }
        }
    }
</script>