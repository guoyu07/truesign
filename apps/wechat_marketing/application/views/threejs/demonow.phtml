<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Three框架</title>
    <script src="/public/bower_components/three.js/build/three.min.js" ></script>



<!--
    控制器
/-->
    <script src="/public/bower_components/three.js/examples/js/controls/FirstPersonControls.js" ></script>

<!--
    动画
-->
    <script src="/public/bower_components/three.js/examples/js/libs/tween.min.js" ></script>
    <script src="/public/bower_components/three.js/examples/js/geometries/ConvexGeometry.js" ></script>
    <script src="/public/bower_components/three.js/examples/js/ParametricGeometries.js" ></script>

<!--
    调试
-->
    <script src="/public/bower_components/three.js/examples/js/libs/stats.min.js" ></script>
    <script src="/public/libs/dat.gui.js" ></script>
    <style type="text/css">
        body {
            /* set margin to 0 and overflow to hidden, to go fullscreen */
            margin: 0;
            overflow: hidden;
        }
    </style>

</head>

<body>
<div id="canvas-frame"></div>
<div id="container"></div>
<div id="WebGL-output"></div>

<script>
    var dom,scene,camera,light,object=[],renderer,helper=[],stats,debug,width,height,ground=[],controls,cube,step=0,sphere,controls,plane,planeGeometry,lookAtMesh
    function initThree() {
//        width = document.getElementById('canvas-frame').clientWidth;
//        height = document.getElementById('canvas-frame').clientHeight;
        width=window.width
        height=window.height

        dom = document.getElementById('canvas-frame')
    }
    function initScene() {
        scene = new THREE.Scene();
//        scene.fog = new THREE.Fog(0xffffff, 0.015, 100);
//        scene.overrideMaterial = new THREE.MeshLambertMaterial({color: 0xffffff});

    }
    function initCamera() {
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.x = 120;
        camera.position.y = 60;
        camera.position.z = 180;
        var lookAtGeom = new THREE.SphereGeometry(2);
        lookAtMesh = new THREE.Mesh(lookAtGeom, new THREE.MeshLambertMaterial({color: 0xff0000}));
        scene.add(lookAtMesh);
//        var lookAtGeom = new THREE.SphereGeometry(2);
//        var lookAtMesh = new THREE.Mesh(lookAtGeom, new THREE.MeshLambertMaterial({color: 0xff0000}));
//        scene.add(lookAtMesh);
//        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
//        camera.position.x = -50;
//        camera.position.y = 50;
//        camera.position.z = 40;
//        camera.lookAt(scene.position);
    }
    function initGround() {
        // create the ground plane
        var planeGeometry = new THREE.PlaneGeometry(60, 40,1,1);
        var planeMaterial = new THREE.MeshLambertMaterial({color: 0xffffff});
        plane = new THREE.Mesh(planeGeometry, planeMaterial);
        plane.receiveShadow = true;

        // rotate and position the plane
        plane.rotation.x = -0.5 * Math.PI;
        plane.position.x = 15;
        plane.position.y = 0;
        plane.position.z = 0;
        scene.add(plane);
//        var planeGeometry = new THREE.PlaneGeometry(60, 20);
//        var planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});
//        var plane = new THREE.Mesh(planeGeometry, planeMaterial);
//        plane.rotation.x = -0.5 * Math.PI;
//        plane.position.x = 15;
//        plane.position.y = 0;
//        plane.position.z = 0;
//        scene.add(plane);
//        ground.push(plane)
    }
    function initLight() {



        // add subtle ambient lighting
        var ambientLight = new THREE.AmbientLight(0x0c0c0c);
        scene.add(ambientLight);

        // add spotlight for the shadows
        var spotLight = new THREE.SpotLight(0xffffff);
        spotLight.position.set(-40, 60, -10);
        spotLight.castShadow = true;
        scene.add(spotLight);
//        light = new THREE.DirectionalLight(0xFF0000, 1.0, 0);
//        light.position.set(100, 100, 200);
//        scene.add(light);
    }


    function initObject() {
// create the ground plane
        var planeGeometry = new THREE.PlaneGeometry(180, 180);
        var planeMaterial = new THREE.MeshLambertMaterial({color: 0xffffff});
        var plane = new THREE.Mesh(planeGeometry, planeMaterial);


        // rotate and position the plane
        plane.rotation.x = -0.5 * Math.PI;
        plane.position.x = 0;
        plane.position.y = 0;
        plane.position.z = 0;

        // add the plane to the scene
        scene.add(plane);

        var cubeGeometry = new THREE.BoxGeometry(4, 4, 4);
        var cubeMaterial = new THREE.MeshLambertMaterial({color: 0x00ee22});
        for (var j = 0; j < (planeGeometry.parameters.height / 5); j++) {
            for (var i = 0; i < planeGeometry.parameters.width / 5; i++) {
                var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);

                cube.position.z = -((planeGeometry.parameters.height) / 2) + 2 + (j * 5);
                cube.position.x = -((planeGeometry.parameters.width) / 2) + 2 + (i * 5);
                cube.position.y = 2;

                scene.add(cube);
            }
        }
//        /*
//        lession 1
//        --start--
//        */
//        // create a cube
//        var cubeGeometry = new THREE.BoxGeometry(4, 4, 4);
//        var cubeMaterial = new THREE.MeshLambertMaterial({color: 0xff0000});
//        cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
//        cube.castShadow = true;
//
//        // position the cube
//        cube.position.x = -4;
//        cube.position.y = 3;
//        cube.position.z = 0;
//        scene.add(cube);
//
//        var planeGeometry = new THREE.PlaneGeometry(180, 180);
//        var planeMaterial = new THREE.MeshLambertMaterial({color: 0xffffff});
//         plane = new THREE.Mesh(planeGeometry, planeMaterial);
//
//
//        // rotate and position the plane
//        plane.rotation.x = -0.5 * Math.PI;
//        plane.position.x = 0;
//        plane.position.y = 0;
//        plane.position.z = 0;
//
//        // add the plane to the scene
//        scene.add(plane);
//
//
//        // create a sphere
//        var sphereGeometry = new THREE.SphereGeometry(4, 20, 20);
//        var sphereMaterial = new THREE.MeshLambertMaterial({color: 0x7777ff});
//        sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
//
//        // position the sphere
//        sphere.position.x = 20;
//        sphere.position.y = 4;
//        sphere.position.z = 2;
//        sphere.castShadow = true;
//
//        // add the sphere to the scene
//        scene.add(sphere);
//        /*
//        --end--
//         */


    }
    function initHelper() {
        var gridhelper = new THREE.GridHelper(500, 200,0x6DC5D1,0x6DC5D1);
        gridhelper.position.y = 0;
        scene.add(gridhelper);
        var axes = new THREE.AxisHelper(20);
        scene.add(axes);
        helper.push(gridhelper);
        helper.push(axes);


        stats = new Stats();
        stats.setMode(0); // 0: fps, 1: ms
        // Align top-left
        stats.domElement.style.position = 'absolute';
        stats.domElement.style.left = '0px';
        stats.domElement.style.top = '0px';
        dom.appendChild(stats.domElement);
        helper.push(stats)


    }
    function initDebug() {
    }
    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
        controls.handleResize();
    }

    function initControls() {
        controls = new THREE.FirstPersonControls(camera);
        controls.movementSpeed = 130;
        controls.lookSpeed = 0.00;
        controls.noFly = false;
        controls.lookVertical = false;
    }
    function InitRender()
    {

        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(new THREE.Color(0xEEEEEE, 1.0));
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.shadowMapEnabled = true;
//        renderer = new THREE.WebGLRenderer();
//        renderer.setClearColor(new THREE.Color(0xEEEEEE));
//        renderer.setSize(window.innerWidth, window.innerHeight);
//        renderer.shadowMapEnabled = true;
//        document.getElementById("container").appendChild(renderer.domElement);
        dom.appendChild(renderer.domElement);
        renderer.render(scene, camera);


    }
    function renderScene() {
        stats.update();
        // rotate the cube around its axes
//        cube.rotation.x += controls.rotationSpeed;
//        cube.rotation.y += controls.rotationSpeed;
//        cube.rotation.z += controls.rotationSpeed;
//        scene.traverse(function (e) {
//            if (e instanceof THREE.Mesh && e != plane) {
//
//                e.rotation.x += controls.rotationSpeed;
//                e.rotation.y += controls.rotationSpeed;
//                e.rotation.z += controls.rotationSpeed;
//            }
//        });
//
//        // bounce the sphere up and down
//        step += controls.bouncingSpeed;
//        sphere.position.x = 20 + ( 10 * (Math.cos(step)));
//        sphere.position.y = 2 + ( 10 * Math.abs(Math.sin(step)));

        // render using requestAnimationFrame
        step += 0.02;
        if (camera instanceof THREE.Camera) {
            var x = 10 + ( 100 * (Math.sin(step)));
            camera.lookAt(new THREE.Vector3(x, 10, 0));
            lookAtMesh.position.copy(new THREE.Vector3(x, 10, 0));
        }
        requestAnimationFrame(renderScene);
        renderer.render(scene, camera);
    }

    function InitResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    }
    function InitControls() {

    }

    function addGeometries() {
        var geoms = [];

        geoms.push(new THREE.CylinderGeometry(1, 4, 4));

        // basic cube
        geoms.push(new THREE.BoxGeometry(2, 2, 2));

        // basic spherer
        geoms.push(new THREE.SphereGeometry(2));

        geoms.push(new THREE.IcosahedronGeometry(4));

        // create a convex shape (a shape without dents)
        // using a couple of points
        // for instance a cube
        var points = [
            new THREE.Vector3(2, 2, 2),
            new THREE.Vector3(2, 2, -2),
            new THREE.Vector3(-2, 2, -2),
            new THREE.Vector3(-2, 2, 2),
            new THREE.Vector3(2, -2, 2),
            new THREE.Vector3(2, -2, -2),
            new THREE.Vector3(-2, -2, -2),
            new THREE.Vector3(-2, -2, 2)
        ];
        geoms.push(new THREE.ConvexGeometry(points));

        // create a lathgeometry
        //http://en.wikipedia.org/wiki/Lathe_(graphics)
        var pts = [];//points array - the path profile points will be stored here
        var detail = .1;//half-circle detail - how many angle increments will be used to generate points
        var radius = 3;//radius for half_sphere
        for (var angle = 0.0; angle < Math.PI; angle += detail)//loop from 0.0 radians to PI (0 - 180 degrees)
            pts.push(new THREE.Vector3(Math.cos(angle) * radius, 0, Math.sin(angle) * radius));//angle/radius to x,z
        geoms.push(new THREE.LatheGeometry(pts, 12));

        // create a OctahedronGeometry
        geoms.push(new THREE.OctahedronGeometry(3));

        // create a geometry based on a function
        geoms.push(new THREE.ParametricGeometry(THREE.ParametricGeometries.mobius3d, 20, 10));

        //
        geoms.push(new THREE.TetrahedronGeometry(3));

        geoms.push(new THREE.TorusGeometry(3, 1, 10, 10));

        geoms.push(new THREE.TorusKnotGeometry(3, 0.5, 50, 20));

        var j = 0;
        for (var i = 0; i < geoms.length; i++) {
            var cubeMaterial = new THREE.MeshLambertMaterial({wireframe: true, color: Math.random() * 0xffffff});

            var materials = [

                new THREE.MeshLambertMaterial({color: Math.random() * 0xffffff, shading: THREE.FlatShading}),
                new THREE.MeshBasicMaterial({color: 0x000000, wireframe: true})

            ];

            var mesh = THREE.SceneUtils.createMultiMaterialObject(geoms[i], materials);
            mesh.traverse(function (e) {
                e.castShadow = true
            });

            //var mesh = new THREE.Mesh(geoms[i],materials[i]);
            //mesh.castShadow=true;
            mesh.position.x = -24 + ((i % 4) * 12);
            mesh.position.y = 4;
            mesh.position.z = -8 + (j * 12);

            if ((i + 1) % 4 == 0) j++;
            scene.add(mesh);
        }

    }

    function init() {



        initThree()
        initScene()
        initLight()
        initCamera()
//        initGround()
        initObject()
//        addGeometries()
        initHelper()

        controls = new function () {
            this.rotationSpeed = 0.02;
            this.bouncingSpeed = 0.03;

            this.numberOfObjects = scene.children.length;

            this.removeCube = function () {
                var allChildren = scene.children;
                var lastObject = allChildren[allChildren.length - 1];
                if (lastObject instanceof THREE.Mesh) {
                    scene.remove(lastObject);
                    this.numberOfObjects = scene.children.length;
                }
            };

            this.addCube = function () {

                var cubeSize = Math.ceil((Math.random() * 3));
                var cubeGeometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize);
                var cubeMaterial = new THREE.MeshLambertMaterial({color: Math.random() * 0xffffff});
                var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
                cube.castShadow = true;
                cube.name = "cube-" + scene.children.length;


                // position the cube randomly in the scene

                cube.position.x = -30 + Math.round((Math.random() * planeGeometry.parameters.width));
                cube.position.y = Math.round((Math.random() * 5));
                cube.position.z = -20 + Math.round((Math.random() * planeGeometry.parameters.height));

                // add the cube to the scene
                scene.add(cube);
                this.numberOfObjects = scene.children.length;
            };

            this.outputObjects = function () {
                console.log(scene.children);
            }


            this.perspective = "Perspective";
            this.switchCamera = function () {
                if (camera instanceof THREE.PerspectiveCamera) {
                    camera = new THREE.OrthographicCamera(window.innerWidth / -16, window.innerWidth / 16, window.innerHeight / 16, window.innerHeight / -16, -200, 500);
                    camera.position.x = 120;
                    camera.position.y = 60;
                    camera.position.z = 180;

                    camera.lookAt(scene.position);
                    this.perspective = "Orthographic";
                } else {
                    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
                    camera.position.x = 120;
                    camera.position.y = 60;
                    camera.position.z = 180;

                    camera.lookAt(scene.position);
                    this.perspective = "Perspective";
                }
            };



        };
        var gui = new dat.GUI();
        gui.add(controls, 'rotationSpeed', 0, 0.5);
        gui.add(controls, 'bouncingSpeed', 0, 0.5);
        gui.add(controls, 'addCube');
        gui.add(controls, 'removeCube');
        gui.add(controls, 'outputObjects');
        gui.add(controls, 'numberOfObjects').listen();
        gui.add(controls, 'switchCamera');
        gui.add(controls, 'perspective').listen();
        window.addEventListener('resize', InitResize, false);

        InitRender()
        renderScene()
//        initControls()
//        onWindowResize()
    }



    window.onload = init;

</script>

</body>
</html>